generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @unique @default(uuid())
  name                String
  email               String    @unique
  role                userRole  @default(member)
  password            String
  needsPasswordChange Boolean   @default(true)
  isDeleted           Boolean   @default(false)
  image               String
  address             String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  Idea                Idea[]
  Blog                Blog[]
  Vote                Vote[]
  Comment             Comment[]

  @@map("users")
}

model Category {
  category_id String       @id @default(uuid())
  name        categoryName
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Idea        Idea[]
  Blog        Blog[]

  @@map("categories")
}

model Idea {
  idea_id           String     @id @default(uuid())
  title             String
  description       String
  categoryId        String
  category          Category   @relation(fields: [categoryId], references: [category_id])
  images            String[]
  authorId          String
  author            User       @relation(fields: [authorId], references: [id])
  problem_statement String
  proposed_solution String
  isPremium         Boolean    @default(false)
  price             String
  status            ideaStatus @default(pending)
  isDeleted         Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  Vote              Vote[]
  Comment           Comment[]

  @@map("ideas")
}

model Blog {
  blog_id     String   @id @default(uuid())
  title       String   @unique
  images      String[]
  description String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [category_id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Vote        Vote[]
}

model Vote {
  vote_id   String    @id @default(uuid())
  voterId   String
  value     voteValue
  voter     User      @relation(fields: [voterId], references: [id])
  ideaId    String?
  idea      Idea?     @relation(fields: [ideaId], references: [idea_id])
  blogId    String?
  blog      Blog?     @relation(fields: [blogId], references: [blog_id])
  isDeleted Boolean   @default(false)

  @@unique([voterId, ideaId])
  @@unique([voterId, blogId])
}

model Comment {
  comment_id String   @id @default(uuid())
  content    String
  commentorId   String
  commentor     User     @relation(fields: [commentorId], references: [id])
  ideaId     String
  idea       Idea     @relation(fields: [ideaId], references: [idea_id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum ideaStatus {
  pending
  draft
  published
  unpublished
}

enum categoryName {
  energy
  waste
  transportation
}

enum userRole {
  admin
  member
}

enum voteValue {
  up
  down
}
